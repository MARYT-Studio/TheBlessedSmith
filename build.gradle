import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.16'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'snapshot'
    mcpMappingVersion = '20171003'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    // injectedTags.put('VERSION', project.version)
    // injectedTags.put('MOD_ID', project.archives_base_name)
    injectedTags.put('VERSION', project.version)
    injectedTags.put('MOD_ID', project.archives_base_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'BlameJared'
        url 'https://maven.blamejared.com/'
        content {
            includeGroup 'CraftTweaker2'
        }
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {

    // Required Dependencies
    // Replace the dependency from original SlashBlade to the Modernized one.
    implementation files('libs/slashblade-mc1.12-r40.jar')
    implementation files('libs/slashblade_addon-1.8.0.jar')
    implementation rfg.deobf('curse.maven:slashblade-japanese-addon-pack-310187:3119004')

    // Optional Dependencies
    compileOnly rfg.deobf('curse.maven:jei-238222:3043174')
    compileOnly rfg.deobf('curse.maven:patchouli-306770:3162874')
    compileOnly rfg.deobf('curse.maven:botania-225643:3330934')
    compileOnly rfg.deobf('curse.maven:baubles-227083:2518667')
    compileOnly rfg.deobf('curse.maven:thaumcraft-223628:2629023')
    compileOnly rfg.deobf('curse.maven:industrial-craft-242638:2980904')
    compileOnly rfg.deobf('curse.maven:the-twilight-forest-227639:2818055')
    compileOnly rfg.deobf('curse.maven:terrafirmacraft-302973:3645502')
    // Util Mods. just for debug convenience
    runtimeOnly rfg.deobf('curse.maven:ftb-utilities-forge-237102:3157548')
    runtimeOnly rfg.deobf('curse.maven:ftb-library-legacy-forge-237167:2985811')

    // AssetMover Dependency
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }

    if (project.use_mixins.toBoolean()) {
        // From README document of Mixinbooter. LINK: https://github.com/CleanroomMC/MixinBooter
        // Common:
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:32.1.2-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.9'

        // ForgeGradle:
        implementation ('zone.rong:mixinbooter:8.9') {
            transitive = false
        }
        annotationProcessor ('zone.rong:mixinbooter:8.9') {
            transitive = false
        }

        // RetroFuturaGradle:
        String mixinBooter = modUtils.enableMixins('zone.rong:mixinbooter:8.9')

        // modUtils.enableMixins('zone.rong:mixinbooter:8.9', 'mod_id.mixins.refmap.json') << add refmap name as 2nd arg (optional)
        api (mixinBooter) {
            transitive = false
        }
        annotationProcessor (mixinBooter) {
            transitive = false
        }
    }
}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

tasks.register('debugPrint') {
    doLast {
        println(project.tasks.compileJava.options.compilerArgs)
    }
}
tasks.compileJava.dependsOn(tasks.debugPrint)
